{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","wavePortal","abi","getTotalWaves","count","toNumber","waveTxn","hash","wait","useEffect","className","onClick","map","index","key","style","backgroundColor","marginTop","padding","address","timestamp","toString","message","ReactDOM","render","document","getElementById"],"mappings":"2yhBAKe,SAASA,IAItB,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAIA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAkCMC,GAlCN,KAkC8B,uCAAG,kCAAAC,EAAA,oEAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3BC,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+BF,GARhB,wBAWNA,EAASG,QAAQ,CAAEC,OAAQ,iBAXrB,QAaL,KAFlBC,EAXuB,QAahBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5CZ,EAAkBY,IAElBN,QAAQC,IAAI,+BAlBe,kDAqB7BD,QAAQC,IAAR,MArB6B,0DAAH,sDA4BxBM,EAAa,uCAAG,gCAAAV,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBS,MAAM,iBALU,0CASKT,EAASG,QAAQ,CAAEC,OAAQ,wBAThC,OASZC,EATY,OAWlBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCV,EAAkBU,EAAS,IAZT,kDAclBJ,QAAQC,IAAR,MAdkB,0DAAH,qDAkBbQ,EAAI,uCAAG,wCAAAZ,EAAA,yDACXG,QAAQC,IAAI,qBADD,WAGYH,OAAbC,EAHC,EAGDA,SACRC,QAAQC,IAAI,qBAAsBF,IAE9BA,EANK,wBAOPC,QAAQC,IAAI,yDACNS,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GACnDC,QAAQC,IAAI,aAAcS,GACpBI,EAASJ,EAASK,YACxBf,QAAQC,IAAI,WAAYa,GAClBE,EAAqB,IAAIL,IAAOM,SAxFpB,6CAwF8CC,EAAWC,IAAKL,GAChFd,QAAQC,IAAI,yBAA0Be,GAb/B,UAcWA,EAAmBI,gBAd9B,eAcHC,EAdG,YAePrB,QAfO,UAe4CqB,EAAMC,WAflD,gCAeCrB,IAfD,UAeK,gCAfL,MAgBPD,QAAQC,IAAI,yBAA0Be,GAhB/B,UAkBOA,EAAmBI,gBAlB1B,eAkBPC,EAlBO,YAmBPrB,QAnBO,UAmB4CqB,EAAMC,WAnBlD,gCAmBCrB,IAnBD,UAmBK,gCAnBL,gBAqBee,EAAmBP,KAAK,gBArBvC,eAqBDc,EArBC,YAsBPvB,QAtBO,UAsBwBuB,EAAQC,KAtBhC,gCAsBCvB,IAtBD,UAsBK,YAtBL,gBAwBDsB,EAAQE,OAxBP,oBAyBPzB,QAzBO,UAyBwBuB,EAAQC,KAzBhC,gCAyBCvB,IAzBD,UAyBK,YAzBL,gBA2BOe,EAAmBI,gBA3B1B,eA2BPC,EA3BO,YA4BPrB,QA5BO,UA4B4CqB,EAAMC,WA5BlD,yBA4BCrB,IA5BD,UA4BK,gCA5BL,8BA8BPD,QAAQC,IAAI,kCA9BL,2DAiCTD,QAAQC,IAAR,OAjCS,0DAAH,qDA4CV,OAJAyB,qBAAU,WACR9B,MACC,IAGD,yBAAK+B,UAAU,iBAEb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAf,2BAIA,yBAAKA,UAAU,OAAf,uGAIA,4BAAQA,UAAU,aAAaC,QAASnB,GAAxC,eAOEhB,GACA,4BAAQkC,UAAU,aAAaC,QAASrB,GAAxC,kBAKDZ,EAASkC,KAAI,SAACpB,EAAMqB,GACnB,OACE,yBAAKC,IAAKD,EAAOE,MAAO,CAAEC,gBAAiB,UAAWC,UAAW,OAAQC,QAAS,QAChF,yCAAe1B,EAAK2B,SACpB,sCAAY3B,EAAK4B,UAAUC,YAC3B,yCAAe7B,EAAK8B,eClKlCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.33b2852d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport wavePortal from './utils/WavePortal.json';\n\nexport default function App() {\n  /*\n  * Just a state variable we use to store our user's public wallet.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*\n   * All state property to store all waves\n   */\n  const [allWaves, setAllWaves] = useState([]);\n  /**\n   * Create a variable here that holds the contract address after you deploy!\n   */\n  const contractAddress = \"0x62A754ACe8e649Fb75ab374E1BE0d50eE7bFE9bd\";  \n\n  const getAllWaves = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, wavePortal.abi, signer);\n\n        const waves = await wavePortalContract.getAllWaves();\n        console.log(\"Waves returned from blockchain = \", waves);\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    console.log(\"Enter wave method\")\n    try {\n      const { ethereum } = window;\n      console.log(\"Ethereum object = \", ethereum)\n\n      if (ethereum) {\n        console.log(\"Ethereum object is non null proceeding ahead with txn\")\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        console.log(\"Provider: \", provider)\n        const signer = provider.getSigner();\n        console.log(\"Signer: \", signer)\n        const wavePortalContract = new ethers.Contract(contractAddress, wavePortal.abi, signer);\n        console.log(\"Wave Portal contract: \", wavePortalContract)\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", await count.toNumber());\n        console.log(\"Wave Portal contract: \", wavePortalContract)\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", await count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(\"test message\");\n        console.log(\"Mining...\", await waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", await waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", await count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        ðŸ‘‹ Hey there!\n        </div>\n\n        <div className=\"bio\">\n        Hi, this is my ethereum smart contract - dapp project! Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {/*\n        * If there is no currentAccount render this button\n        */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}