{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","useEffect","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","waveTxn","hash","wait","className","onClick","map","index","key","style","backgroundColor","marginTop","padding","address","timestamp","toString","message","ReactDOM","render","document","getElementById"],"mappings":"gmdAKe,SAASA,IAItB,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAIA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAQMC,GARN,KAQoBC,EAAIA,KAGlBC,EAAwB,uCAAG,kCAAAC,EAAA,oEAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3BC,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+BF,GARhB,wBAcNA,EAASG,QAAQ,CAAEC,OAAQ,iBAdrB,QAgBL,KAFlBC,EAduB,QAgBhBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5Cd,EAAkBc,IAElBN,QAAQC,IAAI,+BArBe,kDAwB7BD,QAAQC,IAAR,MAxB6B,0DAAH,qDA+BvBM,EAAa,uCAAG,gCAAAV,EAAA,oEAEEC,OAAbC,EAFW,EAEXA,SAFW,uBAKjBS,MAAM,iBALW,0CASIT,EAASG,QAAQ,CAAEC,OAAQ,wBAT/B,OASbC,EATa,OAWnBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCZ,EAAkBY,EAAS,IAZR,kDAcnBJ,QAAQC,IAAR,MAdmB,0DAAH,qDAqBpBQ,qBAAU,WACRb,MACC,IAKH,IAwCMc,EAAI,uCAAG,wCAAAb,EAAA,oEAEYC,SAAbC,EAFC,EAEDA,UAFC,wBAKDY,EAAW,IAAIC,IAAOC,UAAUC,aAAaf,GAC7CgB,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SAjHpB,6CAiH8CxB,EAAaqB,GAPtE,SASWE,EAAmBE,gBAT9B,cASHC,EATG,OAUPpB,QAAQC,IAAI,gCAAiCmB,EAAMC,YAV5C,UAceJ,EAAmBP,KAAK,qBAdvC,eAcDY,EAdC,OAePtB,QAAQC,IAAI,YAAaqB,EAAQC,MAf1B,UAiBDD,EAAQE,OAjBP,eAkBPxB,QAAQC,IAAI,YAAaqB,EAAQC,MAlB1B,UAoBON,EAAmBE,gBApB1B,QAoBPC,EApBO,OAqBPpB,QAAQC,IAAI,gCAAiCmB,EAAMC,YArB5C,wBAuBPrB,QAAQC,IAAI,kCAvBL,0DA0BTD,QAAQC,IAAR,MA1BS,0DAAH,qDA8BV,OACE,yBAAKwB,UAAU,iBAEb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAf,2BAIA,yBAAKA,UAAU,OAAf,uGAIA,4BAAQA,UAAU,aAAaC,QAAShB,GAAxC,eAOEnB,GACA,4BAAQkC,UAAU,aAAaC,QAASnB,GAAxC,kBAKDd,EAASkC,KAAI,SAACjB,EAAMkB,GACnB,OACE,yBAAKC,IAAKD,EAAOE,MAAO,CAAEC,gBAAiB,UAAWC,UAAW,OAAQC,QAAS,QAChF,yCAAevB,EAAKwB,SACpB,sCAAYxB,EAAKyB,UAAUC,YAC3B,yCAAe1B,EAAK2B,eClLlCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.48985108.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json'\n\nexport default function App() {\n  /*\n  * Just a state variable we use to store our user's public wallet.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*\n   * All state property to store all waves\n   */\n  const [allWaves, setAllWaves] = useState([]);\n  /**\n   * Create a variable here that holds the contract address after you deploy!\n   */\n  const contractAddress = \"0x7F5B2919E686f254F79b8D803af4e99D671D8E64\";\n  /**\n   * Create a variable here that references the abi content!\n   */\n  const contractABI = abi.abi;\n  \n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      \n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      \n      /*\n      * Check if we're authorized to access the user's wallet\n      */\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      \n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n   const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])  \n\n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n        console.log(\"Waves returned from blockchain = \", waves);\n        \n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        /*\n        * Execute the actual wave from your smart contract\n        */\n        const waveTxn = await wavePortalContract.wave('this is a message');\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        ðŸ‘‹ Hey there!\n        </div>\n\n        <div className=\"bio\">\n        Hi, this is my ethereum smart contract - dapp project! Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {/*\n        * If there is no currentAccount render this button\n        */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}