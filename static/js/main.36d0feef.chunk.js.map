{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","wavePortal","abi","waves","console","log","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","on","from","prevState","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","gasLimit","waveTxn","hash","wait","getTotalWaves","count","toNumber","useEffect","className","onClick","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36d0feef.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport wavePortal from './utils/WavePortal.json';\n\nexport default function App() {\n  /*\n  * Just a state variable we use to store our user's public wallet.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*\n   * All state property to store all waves\n   */\n  const [allWaves, setAllWaves] = useState([]);\n  /**\n   * Create a variable here that holds the contract address after you deploy!\n   */\n  const contractAddress = \"0xA4b2a912A92C7eace4b9893CE818cCaCe0B1d350\";  \n\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, wavePortal.abi, signer);\n\n        const waves = await wavePortalContract.getAllWaves();\n        console.log(\"Waves returned from blockchain = \", waves);\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        setAllWaves(wavesCleaned);\n\n        /**\n         * Listen in for emitter events!\n         */\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        await getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    console.log(\"Enter wave method\")\n    try {\n      const { ethereum } = window;\n      console.log(\"Ethereum object = \", ethereum)\n\n      if (ethereum) {\n        console.log(\"Ethereum object is non null proceeding ahead with txn\")\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        console.log(\"Provider: \", provider)\n        const signer = provider.getSigner();\n        console.log(\"Signer: \", signer)\n        const wavePortalContract = new ethers.Contract(contractAddress, wavePortal.abi, signer);\n        console.log(\"Wave Portal contract: \", wavePortalContract)\n\n        console.log(wavePortalContract.wave(\"test message\"));\n        console.log(await wavePortalContract.wave(\"test message\"));\n        console.log(wavePortalContract.wave(\"test message\", { gasLimit: 300000 }));\n        \n\n        let count;\n\n        // count = await wavePortalContract.getTotalWaves();\n        // console.log(\"Retrieved total wave count...\", await count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(\"test message\", { gasLimit: 300000 });\n        console.log(\"Mining...\", await waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", await waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", await count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        ðŸ‘‹ Hey there!\n        </div>\n\n        <div className=\"bio\">\n        Hi, this is my ethereum smart contract - dapp project! Connect your Ethereum wallet and wave at me!\n        </div>\n\n        {\n          currentAccount && (\n            <button className=\"waveButton\" onClick={wave}>\n              Wave at Me\n            </button>\n          )\n        }\n\n        {/*\n        * If there is no currentAccount render this button\n        */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}